本次项目主要以分析七个模块的数据，分别为
用户基本信息分析、浏览器分析、地域信息分析、
用户浏览深度分析、外链数据分析、订单信息分析以及事件分析
第一步: etl数据清洗
第二步: 基础维度类编写 StatsLocationDimension  LocationDimension
第三步: service服务,implement
第四步: 写model.value里面的map和reduce

NewUser 和 TotalUser

业务逻辑:
新增用户:
TODO 计算launch事件中uuid唯一的个数,launch事件,en = e_l的事件
=====>触发条件,第一次登陆,或者清空缓存
总用户:
 1、根据运行当天获取日期
 2、获取日期和前一天的对应的时间维度
 3、根据时间维度获取对应的时间维度ID
 4、根据前天的时间维度Id获取前天的新增总用户，根据当天的时间维度Id获取当天的 新增用户
 5、更新当天的新增总用户


计算规则:
  new_install_user计算规则：计算launch事件中，uuid的唯一个数。
  total_user计算规则：同一个维度，前一天的总用户+当天新增用户。(只按照天来统计数据，但是提供按照其他时间维度统计的方式)
  最终数据保存：stats_user和stats_device_browser。
  涉及到的列(除了维度列和created列外)：new_install_users和total_install_users。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。

编码步骤:
1、定义维度信息表对应的顶级父类。
2、指定数据库连接信息指定，搭建DimensionConverter获取维度id的类框架，根据具体的分析到时候再添加内容。
3、搭建自定义OutputFormat和OutputCollector类框架。
4、实现统计new_install_user的用户数
   a. 自定义platform、date、browser维度类，以及操作这些类的工具类。
   b. 实现MR
5、实现统计total_user的用户数。
6、测试


第一步:写所有维度的顶级父类
第二步:写维度类,DataDimension,PlatformDimension等
第三步:基础维度类
----------------------------------------------------------------------------
业务逻辑:
当天所有数据中，uuid的去重个数。

active_user
   active_user计算规则：当天所有数据中，uuid的去重个数。
  最终数据保存：stats_user和stats_device_browser。
  涉及到的列(除了维度列和created列外)：active_users。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。

编码步骤:
1、编写mapper相关类
2、编写reduce相关类
3、编写入口类
4、编写collector类和给定输出配置(xml).
5、测试
------------------------------------------------------------------------------
新增会员:
业务逻辑:
    新增会员统计类似新增用户统计，也是统计新增u_mid的个数，在新增用户统计中，
    我们是统计launch事件中，uuid的唯一个数，那么在新增会员中，我们是统计所有
    事件中的第一次访问网站的会员id的去重个数(第一次访问网站定义为: 在日志收集
    模块上线后，第一次访问网站的均作为新会员)。


new_member
计算规则:
新会员(new_member)计算规则：计算当天(由维度信息确定)的所有数据中的memberId，
要求member id以前没有访问过网站(在日志收集模块上线后没法访问过)，
统计这部分的member id格式作为新会员的数量值。所有要求我们保存member id到某个数据库中，
在这里有两种比较好的方法，第一种将会员信息保存到hbase中，以会员id作为rowkey，这样方式方便获取。
第二种将会员信息保存到mysql中，以会员id作为主键，这种方式方便存储。这里采用第二种方式。
最终数据保存：stats_user和stats_device_browser。涉及到的列(除了维度列和created列外)：new_members。
涉及到其他表有dimension_platform、dimension_date、dimension_browser。
------------------------------------------------------------------------------------------
活跃会员:
总述:活跃会员的统计和活跃用户统计类似，区别只是在于从不同的角度来进行分析访问网站的用户数量。
活跃用户统计是根据我们在cookie中保存的uuid来进行访问网站用户数量的一个统计，而活跃会员统计是
通过统计登录网站的用户数量(去重)。一般而言，如果活跃用户的数量远远超过活跃会员数量，
那么表示本网站对会员的吸引能力不够。

计算规则:
活跃会员(active_member)计算规则：计算当天(确定时间维度信息)的pageview事件的数据中memberid的去重个数.
(这里之所以选择pageview事件，是可能会存在一种可能：某个会员在当天没有进行任何操作，但是他订单支付
成功的操作在今天在被触发，这样在所有数据中就会出现一个java_server平台产生的订单支付成功事件，包含会员id)。
  最终数据保存：stats_user和stats_device_browser。涉及到的列(除了维度列和created列外)：active_members。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。
------------------------------------------------------------------------------------------
总会员计算规则:
总会员(total_member)计算规则：前一天的总会员+今天的新增会员作为今天的总会员数。
如果是计算月维度的总会员，那么就是拿上个月这个维度的总会员 + 这个月维度下的新增会员
作为这个月维度下的总会员。实现方式类似total_users的计算。
  最终数据保存：stats_user和stats_device_browser。涉及到的列(除了维度列和created列外)：total_members。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。
------------------------------------------------------------------------------------------
会话:
总述: 会话分析主要同时计算会话个数和会话长度，主要应用在用户基本信息分析模块和浏览器信息分析模块这两部分。
        会话个数就是计算u_sd的唯一个数，长度就是每个会话的长度总和。
计算规则:
   会话个数指的是计算所有u_sd的个数，会话长度就是计算每个会话的长度，然后计算这些长度的一个总值。
   (注意：处理的数据为所有事件产生的数据)
  最终数据保存：stats_user和stats_device_browser。
  涉及到的列(除了维度列和created列外)：sessions, sessions_length。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。

------------------------------------------------------------------------------------------

hourly分析:
总述:
  Hourly分析指的是按照小时分析数据，在本次项目中，只分析活跃用户、会话个数以及会话长度这三个指标的数据。
  我们通过修改现有的job来达到完成hourly分析数据统计的目标。分别通过在active user和sessions
  这两个job中添加数据可以达到我们的分析要求。

计算规则:
   hourly分析分为hourly active user分析、hourly sessions分析以及hourly sessions length分析，
   分别计算各个小时的活跃用户、会话个数以及会话长度来进行展示操作。
  最终数据保存：stats_hourly表中，每个小时的数据保存到对应列中。
  涉及到其他表有dimension_platform、dimension_date、dimension_kpi。

编码步骤:
1. 修改Active user的mapreduce代码，添加统计hourly active user的代码。
2. 修改Sessions的mr代码，添加统计hourly Sessions和hourly sessions length的代码。
3. 测试
------------------------------------------------------------------------------------------
PV
总述:
   在浏览器信息分析模块中除了用户、会员和会话的分析外，还有pv的分析，pv的计算可以代表网站的流量值，
   也能够表示网站对用户的吸引程度，如果用户平均pv比较高，那么表示网站对用户的引起程度比较高；
   如果是值比较低，那么表示网站对用户的吸引程度比较低。这个时候，就可以通过跳出率等其他统计指标来找出网站的问题所在。

计算规则:
 pv的计算其实就是计算访问url的次数，不涉及的去重，也就是说一个用户访问一个url多少次就算多少pv值。
 也就是说最终结果是一个pageview事件产生一个pv值，不涉及到任何去重操作。
  最终数据保存：stats_device_browser。涉及到的列(除了维度列和created列外)：pv。
  涉及到其他表有dimension_platform、dimension_date、dimension_browser。

编码步骤:
1. MapReduce代码编写
2. collector和xml配置等
3. 测试
扩展：在计算pv值后，可以计算跳出率以及各个页面的情况，可以将页面分为三大类，进入页面、
正常浏览页面以及退出页面(按照会话来分析)。在一个会话中，pageview事件中referrer url是其他网站的
访问就是进入页面的访问，referrer url是本网站的表示是一个正常的浏览页面，会话中的最后一个访问页面
是退出页面以及进入页面的上一个pageview事件(同一个会话)中的页面算做退出页面。
------------------------------------------------------------------------------------------
地域模块:
分析规则1:
  在地域信息分析模块中，我们只统计活跃用户、总会话数以及跳出会话个数这三个指标的信息，
  那么我看将代码写出之前的模式，一个分析指标写一个mapreduce；也可以将这三个指标的统计都
  放到一个mapreduce程序中去操作；还可以将活跃用户统计和总会话数统计放到以前的active_user
  和sessions这两个job中，单独写一个计算跳出会话个数的job来统计最后一个指标。在这里我们采用介
  绍第二种方式，也就是讲所有的指标写到一个mapreduce程序中，方便安装模块进行后期维护。

分析规则2:
地域维度信息(不考虑平台platform和日期date)，我们需要统计三个层面的数据，即：国家级别、省份级别、城市级别。
也就是说需要分别统计这三个维度的活跃用户、总会话以及跳出会话个数。
  日期维度只按天计算数据，不进行按月和按周计算。
  平台维度计算一个all维度和一个具体的平台维度。
  需要原始数据：国家、省份、城市、uuid、serverTime、platform这六个维度的字段信息(或者加一个ip地址)，
  所以在当前只有pc端数据和后台服务端数据的情况下，只需要对pageview事件的数据进行统计计算就可以了。

分析规则3:
  在维度确定的情况下，活跃用户统计就是统计uuid(用户唯一标识符)的去重个数；总会话个数就是统计u_sd(会话id)的去重个数；
  跳出会话个数就是统计只访问一个pv的会话总个数，而且pv的计算是统计访问次数来进行判断的，也就是说pv不去重。
  也就是说最终只需要uuid和u_sd就可以进行判断操作了。
  统计的最终数据保存到表：stats_device_location表的active_users、sessions以及bounce_sessions三列上。
  涉及到其他表有：dimension_platform、dimension_date以及dimension_location。

------------------------------------------------------------------------------------------
外联模块:
分析规则1:
  和地域信息分析一样，在外链分析系统中，我们也只是统计活跃用户、总会话以及跳出会话这三个指标的数据。
  其中活跃用户和总会话个数和地域分析一样，采用uuid和sid的去重数量来表示，也就是分别将去重后的uuid
  个数和去重后的sid个数作为外链分析模块中的活跃用户和总会话指标。区别在于计算跳出会话

分析规则2:
  外链维度信息(不考虑平台platform和日期date)，我们需要统计两个层面的数据，即：all、具体外链。
  也就是说需要分别统计这两个维度的活跃用户、总会话以及跳出会话个数。同以前的维度信息不一样，
  在这里外链维度采用完全确定的模式，也就是说在运行过程中，代码中不会涉及到外链信息的插入。
  需要原始数据：referrer url、uuid、u_sd、serverTime、platform这五个维度的字段信息，
  所以在当前只有pc端数据和后台服务端数据的情况下，只需要对pageview事件的数据进行统计计算就可以了。

分析规则3:
  活跃用户和总会话的统计规则就是统计去重后的uuid和sid的个数。这里主要介绍下，统计跳出会话的个数。
  详见..\文档\外链信息分析-跳出会话计算规则.txt
  统计的最终数据保存到表：stats_inbound表的active_users、sessions以及bounce_sessions三列上。
  涉及到其他表有：dimension_platform、dimension_date以及dimension_inbound。

==========================================================================================
外链跳出会话计算规则如下：
跳出会话，不仅仅只需要inbound进入的页面数据，而且还需要后续的普通页面。
platform+date inboundid(0表示普通页面) + sid + servertime： map阶段输出
reducer阶段工作：
	1. 按照sid进行分组操作，放到map集合中
	2. 针对map集合中的单个会话集合数据进行按照时间排序
	3. 计算跳出会话个数

解决方案：
	采用二次排序来避免在reducer阶段的大量内存操作。
	platform+date+sid+servertime inboundid： map阶段输出
	platform+date进行分组，先按照platform+date进行排序，然后按照sid排序，最后按照serverTime排序。
==========================================================================================
编码步骤:
  由于计算跳出会话的规则和计算活跃用户&总会话的规则不一样，所以这里我们采用两个不同mapreduce程序来计算统计数据。
1. 在mysql中执行文件..\文档\dimension_inbound.sql
2. 将文件..\文档\1113.log上传到hdfs上的/logs/11/13文件夹中，然后运行AnalyserLogDataRunner类并指定时间为2018-11-13。
3. 编写操作dimension inbound相关类
4. 编写统计活跃用户及总会话的mr程序
5. 测试
6. 编写统计跳出会话个数的mr程序。
7. 测试
